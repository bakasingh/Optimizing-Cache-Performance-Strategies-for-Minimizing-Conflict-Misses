We have Remap table a matrix which will contain to which set a given set is mapped
We will keeps its column size fixed to 4 for Now
So a set can only be remapped to 4 different sets

We also have 2 maps which contain the access counts and eviction counts corresponding to each set

Algo is as follows

We will check access counts for each set in each handle_fill handle_read and handle_writeback

if (access_count>16)
       if(first time)(as there is no element mapped to this set){   //(as there is no element mapped to this set)

        //search a cold set from the access_count map as it is sorted                             //Bingo 1
        //if(searched_cold set is mapped to less than 4 other sets) then
        //remap the given set with the searched cold set }
        
      else{
           Search from the Remap table to which set it was already mapped then go to that set    //Bingo 2
      }
    
//A set can only be mapped to 4 other set and mapped by 4 other set

Create another map to hold the count of number of elements mapped to that set 
map<set to int> give_count_of_sets_mapped 



//Bingo 1 details:
As map is always in sorted order take the last element 
Check  it is mapped to less than 4 other sets 
   if yes then map the given set with this set also store this set in given set's Remap table

   if No  Then go for second last element and so on and so on


//Bingo 2 details:

If the given set was already remappd to some set then:

  we will check if the given set has left cold or not (as it can change dynamically)
      if (it_has_not left cold){
            
            if(there is still space in remap table corresponding this set out of 4 spaces){
                go for another remapping
            }
            else{
                search another relatively cold set from the remap table
            }
      }
      else{
        give the same set for further action
      }
